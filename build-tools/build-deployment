#!/usr/bin/env python3

from pathlib import Path
import fire
import subprocess
import json
import os
import stat
import textwrap
from pprint import pprint
from packaging import version, specifiers


# Globals
script_dir = Path(os.path.dirname(os.path.realpath(__file__)))
types_path = script_dir / 'types.dhall'
tools_path = script_dir / 'tools-internal.dhall'


###############
# Entry points #
###############

def build(config_path, install_symlinks_in_local_bin = False):
    '''
    Input must be a file containing a Dhall expression of type `DockerNginxDepl`
    or `DockerSyncDepl` (see also `types.dhall`).
    Output is written to the directory specified by the `targetDir` setting.
    The flag `install_symlinks_in_local_bin` can be used to install symlinks to
    the generated scripts in `~/bin`.
    '''

    config_path = Path(config_path).absolute()

    deployment_type = phase_discriminate_deployment_type(config_path)

    if deployment_type is None:
        raise Exception('Could not discriminate deployment type.')
    elif deployment_type == 'DockerNginxDepl':
        build_docker_nginx_depl(config_path, install_symlinks_in_local_bin)
    else:
        build_docker_sync_depl(config_path, install_symlinks_in_local_bin)


def generate_password_hashes(password_list_path, out_path):
    '''
    Input must be a file containing a Dhall expression of type `PasswordList`
    (see also `types.dhall`).
    Output is a Dhall expression of type `PasswordList` with all passwords given
    as hashes; written to `out_path`.
    '''

    password_list_path = Path(password_list_path).absolute()


    ###########################
    # Read password list file #
    ###########################

    password_list = phase_read_password_list(password_list_path)


    ############################
    # Generate password hashes #
    ############################

    users_2_hashes = phase_generate_password_hashes(password_list)


    ##########################
    # Write Dhall expression #
    ##########################

    print('Writing to output file...')

    passwords_dhall = ''.join([f', t.assignUser2PasswordHash "{user}" "{hash}"\n' for user, hash in users_2_hashes.items()])

    content = textwrap.dedent(f'''\
        let t = ./EXTERNAL_TOOLS_PATH
        let T = t.types

        in
        [
    ''')
    content += passwords_dhall
    content += textwrap.dedent(f'''\
        ]
        : T.PasswordList
    ''')

    Path(out_path).absolute().write_text(content)


###################
# DockerNginxDepl #
###################

def build_docker_nginx_depl(config_path, install_symlinks_in_local_bin):

    ####################
    # Read config file #
    ####################

    config = phase_read_config(config_path, 'tagDockerNginxDepl')


    #########
    # Paths #
    #########

    conjin_dir = Path(config['depl']['conjinDir']).absolute()
    app_dir    = Path(config['depl']['appDir']).absolute()
    target_dir = Path(config['depl']['targetDir']).absolute()

    linkchecker_vol_dir = Path(config['linkcheckerVolDir']).absolute()
    preprocess_vol_dir  = Path(config['preprocessVolDir']).absolute()


    #####################################
    # Check that conjin version matches #
    #####################################

    phase_check_conjin_version(conjin_dir, app_dir)


    ##############################
    # Create directory structure #
    ##############################

    target_dirs = [
        linkchecker_vol_dir,
        preprocess_vol_dir,
        target_dir,
        target_dir / 'bin',
        target_dir / 'htdocs',
    ]

    for module_id,module in config['depl']['modules'].items():
        if module['compileScss']:
            target_dirs.append(target_dir / 'htdocs' / get_template_css_dir(config['depl']['moduleLocations'][module_id]))

    phase_build_dirs(target_dirs)

    # Make `preprocess` dir writable for all users
    preprocess_vol_dir.chmod(preprocess_vol_dir.stat().st_mode | stat.S_IWGRP | stat.S_IWOTH)


    ###########################################
    # Build config files generated from Dhall #
    ###########################################

    target_config_files_docker = {
        'docker-compose-app-yml': {
            'path':   target_dir / 'docker-compose-app.yml',
            'format': 'yaml'
        },
        'docker-compose-linkchecker-yml': {
            'path':  target_dir / 'docker-compose-linkchecker.yml',
            'format': 'yaml'
        },
    }

    target_config_files = {
        **target_config_files_docker,
        'config-json': {
            'path': target_dir / 'htdocs/config.json',
            'format': 'json'
        }
    }

    phase_build_dhall_config_files(target_config_files, config_path, 'makeDockerNginxConfigFiles')


    ############################
    # Generate password hashes #
    ############################

    users_2_hashes = phase_generate_password_hashes(config['depl']['authentication']['users2passwords'])


    ######################
    # Build `users.json` #
    ######################

    phase_build_users_json(target_dir, users_2_hashes)


    ############################################################
    # Register passwords for preprocess script and linkchecker #
    ############################################################

    users_2_commands = {}
    if 'preprocessScriptPasswordRegisterCmd' in config['depl']['desktopIntegration']:
        users_2_commands[config['depl']['desktopIntegration']['preprocessScriptUser']] = config['depl']['desktopIntegration']['preprocessScriptPasswordRegisterCmd']
    if 'linkcheckerPasswordRegisterCmd' in config:
        users_2_commands[config['linkcheckerUser']] = config['linkcheckerPasswordRegisterCmd']
    
    phase_register_passwords(config['depl']['authentication']['users2passwords'], users_2_commands)


    ############################
    # Build `htdocs/.htaccess` #
    ############################

    # HTTPS is not supported for DockerNginxDeploy
    # Compression is already handled by the nginx image
    phase_build_htaccess(target_dir, conjin_dir, '/', force_https=False, activate_compression=False)
    

    #######################
    # Build Docker images #
    #######################

    phase_build_docker_images(target_config_files_docker, config['depl']['dockerProjName'])


    #########################
    # Build `bin/*` scripts #
    #########################

    target_bin_scripts = {
        'up': {
            'path': target_dir / 'bin' / 'up',
            'content': textwrap.dedent(f'''\
                #! /bin/bash

                docker compose \\
                        --file         {target_config_files['docker-compose-app-yml']['path']} \\
                        --project-name {config['depl']['dockerProjName']} \\
                        up --detach \\
                && sleep 1 \\
                && {target_dir / 'bin' / 'preprocess'} \\
                ''')
        },
        'down': {
            'path': target_dir / 'bin' / 'down',
            'content': textwrap.dedent(f'''\
                #! /bin/bash

                docker compose \\
                        --file         {target_config_files['docker-compose-app-yml']['path']} \\
                        --project-name {config['depl']['dockerProjName']} \\
                        down
                ''')
        },
        'linkchecker': {
            'path': target_dir / 'bin' / 'linkchecker',
            'content': textwrap.dedent(f'''\
                #! /bin/bash

                export LINKCHECKER_PREFIX=''

                # Iterate over all arguments passed to the script and append it
                for arg in "$@"; do
                    LINKCHECKER_PREFIX="$LINKCHECKER_PREFIX$arg/"
                done

                export UID="$(id -u)"
                export GID="$(id -g)"
                export LINKCHECKER_PASSWORD=`{config['linkcheckerPasswordLookupCmd']}` &&
                docker compose \\
                        --file         {target_config_files['docker-compose-linkchecker-yml']['path']} \\
                        --project-name {config['depl']['dockerProjName']} \\
                        up &&

                echo "Results are output in {config['linkcheckerVolDir']}/linkchecker-output.html, launching web browser now..."
                xdg-open "file://{config['linkcheckerVolDir']}/linkchecker-output.html"
                ''')
        }
    }

    target_bin_scripts['preprocess'] = make_preprocess_target_bin_script(
        target_dir,
        config['nginxVirtualHost'],
        '/',
        False, # HTTPS is not supported for DockerNginxDepl
        config['depl']['desktopIntegration']['preprocessScriptUser'],
        config['depl']['desktopIntegration']['preprocessScriptPasswordLookupCmd'])

    phase_build_bin_scripts(target_bin_scripts)


    ####################
    # Install in ~/bin #
    ####################

    if install_symlinks_in_local_bin:
        phase_install_symlinks_in_local_bin_function(target_bin_scripts, config['depl']['name'])

    print('Done.')


##################
# DockerSyncDepl #
##################

def build_docker_sync_depl(config_path, install_symlinks_in_local_bin):  

    ####################
    # Read config file #
    ####################

    config = phase_read_config(config_path, 'tagDockerSyncDepl')


    #########
    # Paths #
    #########

    conjin_dir = Path(config['depl']['conjinDir']).absolute()
    app_dir    = Path(config['depl']['appDir']).absolute()
    target_dir = Path(config['depl']['targetDir']).absolute()


    #####################################
    # Check that conjin version matches #
    #####################################

    phase_check_conjin_version(conjin_dir, app_dir)


    ##############################
    # Create directory structure #
    ##############################

    target_dirs = [
        target_dir,
        target_dir / 'bin',
        target_dir / 'htdocs',
        target_dir / 'htdocs' / 'preprocess'
    ]

    for module_id,module in config['depl']['modules'].items():
        if module['compileScss']:
            target_dirs.append(target_dir / 'htdocs' / get_template_css_dir(config['depl']['moduleLocations'][module_id]))

    phase_build_dirs(target_dirs)


    ###########################################
    # Build config files generated from Dhall #
    ###########################################

    target_config_files_docker = {
        'docker-compose-sync-yml': {
            'path': target_dir / 'docker-compose-sync.yml',
            'format': 'yaml'
        }
    }

    target_config_files = {
        **target_config_files_docker,
        'config-json': {
            'path': target_dir / 'htdocs/config.json',
            'format': 'json'
        }
    }

    phase_build_dhall_config_files(target_config_files, config_path, 'makeDockerSyncConfigFiles')


    ############################
    # Generate password hashes #
    ############################

    users_2_hashes = phase_generate_password_hashes(config['depl']['authentication']['users2passwords'])


    ######################
    # Build `users.json` #
    ######################

    phase_build_users_json(target_dir, users_2_hashes)


    ############################################################
    # Register passwords for preprocess script and linkchecker #
    ############################################################

    users_2_commands = {}
    if 'preprocessScriptPasswordRegisterCmd' in config['depl']['desktopIntegration']:
        users_2_commands[config['depl']['desktopIntegration']['preprocessScriptUser']] = config['depl']['desktopIntegration']['preprocessScriptPasswordRegisterCmd']
    
    phase_register_passwords(config['depl']['authentication']['users2passwords'], users_2_commands)


    ############################
    # Build `htdocs/.htaccess` #
    ############################

    phase_build_htaccess(target_dir, conjin_dir, config['urlBase'], force_https=config['forceHTTPS'], activate_compression=config['activateCompression'])
    

    #######################
    # Build Docker images #
    #######################

    phase_build_docker_images(target_config_files_docker, config['depl']['dockerProjName'])


    #########################
    # Build `bin/*` scripts #
    #########################

    target_bin_scripts = {
        'sync': {
            'path': target_dir / 'bin' / 'sync',
            'content': textwrap.dedent(f'''\
                #! /bin/bash
                
                export UID="$(id -u)"
                export GID="$(id -g)"
                docker compose \\
                        --file         {target_config_files['docker-compose-sync-yml']['path']} \\
                        --project-name {config['depl']['dockerProjName']}-sync \\
                        up \\
                && sleep 1 \\
                && {target_dir / 'bin' / 'preprocess'} \\
            ''')
        }
    }

    target_bin_scripts['preprocess'] = make_preprocess_target_bin_script(
        target_dir,
        config['host'],
        config['urlBase'],
        config['preferHTTPS'],
        config['depl']['desktopIntegration']['preprocessScriptUser'],
        config['depl']['desktopIntegration']['preprocessScriptPasswordLookupCmd'])

    phase_build_bin_scripts(target_bin_scripts)


    ####################
    # Install in ~/bin #
    ####################

    if install_symlinks_in_local_bin:
        phase_install_symlinks_in_local_bin_function(target_bin_scripts, config['depl']['dockerProjName'])

    
    print('Done.')


####################
# Helper functions #
####################

def phase_discriminate_deployment_type(config_path):
    print('Discriminating deployment type...')

    input  = f'({config_path}): ({types_path}).DockerNginxDepl'
    result = subprocess.run('dhall type', input=input, shell=True, text=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    if (result.returncode == 0):
        return 'DockerNginxDepl'
    else:
        input  = f'({config_path}): ({types_path}).DockerSyncDepl'
        result = subprocess.run('dhall type', input=input, shell=True, text=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        if (result.returncode == 0):
            return 'DockerSyncDepl'
        else:
            # Provoke type error and write error to StdErr
            input  = f'{config_path}'
            result = subprocess.run('dhall type', input=input, shell=True, text=True, stdout=subprocess.DEVNULL)
            return None

    
def phase_read_config(config_path, function):
    print('Reading config file...')

    input = f'(({types_path}).{function} ({config_path}))'
    config_json = subprocess.check_output('dhall-to-json', input=input, shell=True, text=True)

    return json.loads(config_json)


def phase_read_password_list(password_list_path):
    print('Reading password list file...')

    input = f'(({types_path}).tagPasswordList ({password_list_path}))'
    password_list_json = subprocess.check_output('dhall-to-json', input=input, shell=True, text=True)

    return json.loads(password_list_json)


def phase_check_conjin_version(conjin_dir, app_dir):
    print('Checking conjin version...')

    conjin_metadata_file = conjin_dir / 'metadata.json'
    app_metadata_file    = app_dir    / 'metadata.json'

    conjin_metadata = json.loads(conjin_metadata_file.read_text())
    app_metadata    = json.loads(app_metadata_file.read_text())

    conjin_version_given = version.parse(conjin_metadata['version'])
    conjin_version_spec  = specifiers.SpecifierSet(app_metadata['conjinVersion'])

    if conjin_version_given not in conjin_version_spec:
        raise Exception(f'Conjin version {conjin_version_spec} required, but only {conjin_version_given} is available.')


def phase_build_dirs(target_dirs):
    print('Building dirs...')

    for path in target_dirs:
        path.mkdir(parents=True, exist_ok=True)


def phase_build_dhall_config_files(target_config_files, config_path, tools_function):
    print('Building config files from Dhall config...')

    for key,file in target_config_files.items():
        command = 'dhall-to-' + file['format']
        input = f'(({tools_path}).{tools_function} ({config_path})).{key}'

        print('- ' + key + '...')
        content = subprocess.check_output(command, input=input, shell=True, text=True)

        file['path'].write_text(content)


def phase_generate_password_hashes(users2tagged_passwords):
    print('Generating password hashes...')

    users_2_hashes = {}

    for user, tagged_password in users2tagged_passwords.items():
        if tagged_password['tag'] == 'Plain':
            password = tagged_password['contents']

            print('- Hashing password for ' + user + '...')
            hash = subprocess.check_output(f"docker run --rm -it php:8.2-cli php -r 'print(password_hash(\"{ password }\", PASSWORD_DEFAULT));'", shell=True, text=True)
            users_2_hashes[user] = hash
        else:
            hash = tagged_password['contents']
            users_2_hashes[user] = hash

    return users_2_hashes


def phase_build_users_json(target_dir, users_2_hashes):
    print('Building `users.json`...')

    users_2_hashes_json = json.dumps(users_2_hashes, indent=4)
    (target_dir / 'htdocs/users.json').write_text(users_2_hashes_json)


def phase_register_passwords(users_2_tagged_passwords, users_2_commands):
    print('Registering passwords...')

    for user, command in users_2_commands.items():
        print(f'- Registering password for {user}...')

        assert user in users_2_tagged_passwords, f'No password given for user {user}.'
        assert users_2_tagged_passwords[user]['tag'] == 'Plain', f'Password for {user} must be in plain text.'

        subprocess.run(command, input=users_2_tagged_passwords[user]['contents'], shell=True, text=True)


def phase_build_htaccess(target_dir, conjin_dir, url_base, force_https, activate_compression):
    print('Building .htaccess file...')

    content = textwrap.dedent(f'''\
        RewriteEngine on
        RewriteBase {url_base}

        ''')
    
    if force_https:
        content += (conjin_dir / 'src/htaccess_force_https').read_text() + '\n\n'

    if activate_compression:
        content += (conjin_dir / 'src/htaccess_activate_compression').read_text() + '\n\n'

    content += (conjin_dir / 'src/htaccess_main').read_text()

    (target_dir / 'htdocs/.htaccess').write_text(content)


def phase_build_docker_images(target_config_files, docker_proj_name):
    print('Building Docker images...')

    for file in target_config_files.values():
        print(f'- {file["path"]}...')
        subprocess.run(f'docker compose --file "{file["path"]}" --project-name "{docker_proj_name}" build', shell=True)


def make_preprocess_target_bin_script(target_dir: str, host: str, url_base: str, prefer_https: bool, user: str, password_retrieval_cmd: str):
    return {
        'path': target_dir / 'bin' / 'preprocess',
        'content': textwrap.dedent(f'''\
            #! /bin/bash
            # This script was auto-generated.

            # Read Password and send it to the server
            password=`{password_retrieval_cmd}` &&
            curl --cookie "user={user}; password=$password" {'https' if prefer_https else 'http'}://{host}{url_base}preprocess/
            ''')
    }


def phase_build_bin_scripts(target_bin_scripts):
    print('Building bin scripts...')

    for file in target_bin_scripts.values():
        file['path'].write_text(file['content'])
        # Make file executable
        st = os.stat(file['path'])
        os.chmod(file['path'], st.st_mode | stat.S_IEXEC)


def phase_install_symlinks_in_local_bin_function(bin_scripts, depl_name):
    print('Installing symlinks in ~/bin...')

    local_bin_dir = Path.home() / 'bin'
    local_bin_dir.mkdir(parents=True, exist_ok=True)

    for file in bin_scripts.values():
        link_path = local_bin_dir / (depl_name + '-' + file['path'].name)
        if link_path.exists():
            link_path.unlink()

        os.symlink(file['path'], link_path)


def get_template_css_dir(module_location):
    if module_location['isShared'] and module_location['isExternal']:
        return 'modules-shared-ext-css/' + module_location['dirName']
    elif module_location['isShared'] and not module_location['isExternal']:
        return 'modules-shared-css/' + module_location['dirName']
    elif not module_location['isShared'] and module_location['isExternal']:
        return 'modules-ext-css/' + module_location['dirName']
    else:
        return 'modules-css/' + module_location['dirName']


########
# Main #
########

if __name__ == '__main__':
    fire.Fire({
        'build':                    build,
        'generate-password-hashes': generate_password_hashes,
    })